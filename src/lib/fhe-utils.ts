import { createFhevmInstance } from '@fhevm/sdk';

export interface FHEInstance {
  encrypt: (value: number, contractAddress: string, userAddress: string) => Promise<{ encryptedData: string; inputProof: string }>;
  decrypt: (encryptedData: string, contractAddress: string, userAddress: string) => Promise<number>;
}

let fhevmInstance: FHEInstance | null = null;

export async function initializeFHE() {
  if (fhevmInstance) {
    return fhevmInstance;
  }

  try {
    const instance = await createFhevmInstance({
      chainId: 11155111, // Sepolia
      publicKey: {
        name: 'FHE',
        publicKey: '0x0000000000000000000000000000000000000000000000000000000000000000', // Will be fetched from contract
      },
    });

    fhevmInstance = {
      encrypt: async (value: number, contractAddress: string, userAddress: string) => {
        const encrypted = instance.encrypt32(value);
        return {
          encryptedData: encrypted,
          inputProof: '', // Will be generated by the SDK
        };
      },
      decrypt: async (encryptedData: string, contractAddress: string, userAddress: string) => {
        return instance.decrypt(contractAddress, encryptedData);
      },
    };

    return fhevmInstance;
  } catch (error) {
    console.error('Failed to initialize FHE:', error);
    throw error;
  }
}

export async function getFhevmInstance() {
  if (!fhevmInstance) {
    await initializeFHE();
  }
  return fhevmInstance;
}

export async function encryptMessage(
  message: string,
  contractAddress: string,
  userAddress: string
): Promise<{ encryptedData: string; inputProof: string }> {
  const instance = await getFhevmInstance();
  
  // Convert string to number for encryption (simplified approach)
  const messageHash = message.split('').reduce((hash, char) => {
    return hash + char.charCodeAt(0);
  }, 0);
  
  return instance.encrypt(messageHash, contractAddress, userAddress);
}

export async function encryptBoolean(
  value: boolean,
  contractAddress: string,
  userAddress: string
): Promise<{ encryptedData: string; inputProof: string }> {
  const instance = await getFhevmInstance();
  return instance.encrypt(value ? 1 : 0, contractAddress, userAddress);
}

export async function encryptAmount(
  value: number,
  contractAddress: string,
  userAddress: string
): Promise<{ encryptedData: string; inputProof: string }> {
  const instance = await getFhevmInstance();
  return instance.encrypt(value, contractAddress, userAddress);
}
